import json

from iiif_prezi3.loader import monkeypatch_schema
from iiif_prezi3.skeleton import (
    Annotation,
    AnnotationPage,
    Canvas,
    Manifest,
    ResourceItem,
    ServiceItem,
)


class CreateCanvasFromLocalIIIF:
    def create_canvas_from_local_iiif(
        self,
        info_json_path,
        image_id,
        base_url,
        anno_id=None,
        anno_page_id=None,
        **kwargs,
    ):
        """Create a canvas from a local IIIF Image setup.

        Creates a canvas from a local IIIF Image service using the info.json
        generated by pyvips dzsave.

        Args:
            info_json_path (str): Path to the local info.json file
            image_id (str): Base identifier for the image (e.g., "image1")
            base_url (str): Base URL where the IIIF files will be served
            anno_id (str): An HTTP URL for the annotation
            anno_page_id (str): An HTTP URL for the annotation page
            **kwargs: Additional arguments passed to Canvas

        Returns:
            canvas (Canvas): the Canvas created from the local IIIF Image
        """
        # Create the canvas
        canvas = Canvas(**kwargs)

        # Read the info.json
        with open(info_json_path, "r") as f:
            info_json = json.load(f)

        # Create the image resource
        service_url = f"{base_url}/{image_id}"
        body = ResourceItem(
            id=f"{service_url}/full/max/0/default.jpg",
            type="Image",
            format="image/jpeg",
        )

        # Set height and width from info.json
        body.height = info_json["height"]
        body.width = info_json["width"]

        # Create the IIIF v3 image service
        service = ServiceItem(
            id=service_url,
            type="ImageService3",
            profile="level0",
        )

        # Add service to the image resource
        body.service = [service]

        # Create the annotation
        annotation = Annotation(
            id=anno_id, motivation="painting", body=body, target=canvas.id
        )

        # Create the annotation page and add the annotation
        annotation_page = AnnotationPage(id=anno_page_id)
        annotation_page.add_item(annotation)

        # Add the annotation page to the canvas
        canvas.add_item(annotation_page)

        # Set canvas dimensions
        canvas.set_hwd(info_json["height"], info_json["width"])

        return canvas

    def make_canvas_from_local_iiif(self, info_json_path, image_id, base_url, **kwargs):
        """Convenience method to create and add a canvas to the manifest."""
        canvas = self.create_canvas_from_local_iiif(
            info_json_path, image_id, base_url, **kwargs
        )
        self.add_item(canvas)
        return canvas


# Monkeypatch the Manifest class to add these methods
monkeypatch_schema(Manifest, [CreateCanvasFromLocalIIIF])
